#   the_add[1, ]$energetski_razred,
#   the_add[1, ]$ima_vrt,
#   the_add[1, ]$ima_balkon
# ))
# post procesiranje
the_add$stambena_povrsina_sq = the_add$stambena_povrsina^2
rvar = total_model[["rvar"]]
predictors = total_model[["predictors"]]
d = the_add[, colnames(the_add) %in% total_model[["dcolnames"]]]
num_mins = total_model[["num_mins"]]
num_maxs = total_model[["num_maxs"]]
l1 = lapply(colnames(d), function(cn) {
#  if (is.numeric(d[[cn]])) d[[cn]] <<- scale(d[[cn]])
if (is.numeric(d[[cn]])) {
mn = num_mins[[cn]]
mx = num_maxs[[cn]]
if (mn != mx) {
d[[cn]] <<- (d[[cn]]-mn)/(mx-mn)
} else {
d[[cn]] <<- 1
}
}
})
# add the new chosen predictors (interactions) to d
for (newpredictor in predictors) {
if (grepl("__", newpredictor)) {
print(paste("Adding", newpredictor))
# ok, this is an interaction factor, check if it is n-n or f-f
preds = unlist(strsplit(newpredictor, "__"))
if (is.factor(d[[preds[1]]]) && is.factor(d[[preds[2]]])) {
itr = interaction(d[[preds[1]]], d[[preds[2]]], sep = "__")
d[[newpredictor]] = itr
levels(d[[newpredictor]]) = levels(itr)
} else if (is.numeric(d[[preds[1]]]) && is.numeric(d[[preds[2]]])) {
d[[newpredictor]] = d[[preds[1]]] * d[[preds[2]]]
} else {
print(paste("Unrecognized predictor", newpredictor))
}
}
}
d = d[, colnames(d) %in% c(rvar, predictors)]
f = total_model[["formula"]]
library(caret)
library(xgboost)
# ako d nema rvar, dodati dummy zbog model.matrix
if (is.null(d[[rvar]])) {
d[[rvar]] = rep(0, nrow(d))
}
dM = data.frame(model.matrix(as.formula(f), d))
colnames(dM) = enc2utf8(colnames(dM))
dmodel = total_model[["dmodel"]]
ALG = "lm"
if (ALG == "lm") {
# ## linear approach
# xgboost
# dpredicted = predict(dmodel, newdata = as.matrix(dM[, !names(dM) %in% c(rvar)]))
# lm
dpredicted_ci = predict(dmodel,
newdata = dM,
type='response',
interval = "confidence")
dpredicted = dpredicted_ci[, "fit"]
dpredicted_lwr = dpredicted_ci[, "lwr"]
dpredicted_upr = dpredicted_ci[, "upr"]
} else if (ALG == "nn") {
## NN approach
# library(tensorflow)
# library(keras)
#
# dmodel = unserialize_model(dmodel, compile = T)
#
# colnames(dM) = gsub("č|ć", "c", colnames(dM))
# colnames(dM) = gsub("Č|Ć", "C", colnames(dM))
# colnames(dM) = gsub("đ", "dj", colnames(dM))
# colnames(dM) = gsub("Đ", "Dj", colnames(dM))
# colnames(dM) = gsub("š", "s", colnames(dM))
# colnames(dM) = gsub("Š", "S", colnames(dM))
# colnames(dM) = gsub("ž", "z", colnames(dM))
# colnames(dM) = gsub("Ž", "Z", colnames(dM))
#
# dpredicted = as.numeric(predict_on_batch(dmodel, as.matrix(dM[, !names(dM) %in% c(rvar)])))
#
# last_error = tail(total_model[["history"]]$metrics$mean_absolute_error, n = 1) # for NN
# last_error_upr = last_error + 1.96 * sqrt(last_error * (1 - last_error) / nrow(dM))
# dpredicted_lwr = dpredicted - last_error_upr
# dpredicted_upr = dpredicted + last_error_upr
## NN approach
} else {
return("Unknown algorithm!")
}
# "odskaliramo" predikcije i eksponenciramo (jer smo prilikom modeliranja radili log od rvar)
dpredicted = exp(dpredicted * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_lwr = exp(dpredicted_lwr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_upr = exp(dpredicted_upr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
paste("Cijena: ", round(dpredicted), " kn (", round(dpredicted_lwr), "kn - ", round(dpredicted_upr), "kn)", sep = "")
}
)
output$cijena <- renderText({
re()
})
output$debugger <- renderText({
Encoding(input$naselje)
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='itmarket', token='C1A599E9B054414D2AF7752A881E154E', secret='aqXbJmCkZsdOiqoWmaF3Gi6UIOUXQdjYIGGcNxu3')
library(rsconnect)
rsconnect::deployApp('.')
#setwd("C:\\OnlineSync\\Mega\\R\\work\\web_scraping_real_estate\\cijenastanaapp")
# -- READ THE MODEL AND SET THE VARIABLES
total_model = readRDS("new_lm_rsq_844.RDS")
#total_model = readRDS("new_nn_rsq_851.RDS")
# -- NOW THE SHINY PART
library(shiny)
ui <- shinyUI(
fluidPage(
fluidRow(
column(
h1("Izračun cijene stana"),
width = 12
)
),
fluidRow(
column(
selectInput("grad_opcina", "Grad-općina", total_model[["factor_levels"]][["grad_opcina"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("naselje", "Naselje", total_model[["factor_levels"]][["naselje"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("tip_stana", "Tip stana", total_model[["factor_levels"]][["tip_stana"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("broj_etaza", "Broj etaža", total_model[["factor_levels"]][["broj_etaza"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("broj_soba", "Broj soba", total_model[["factor_levels"]][["broj_soba"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
numericInput("stambena_povrsina", "Stambena površina (m2)", value = total_model[["num_mins"]][["stambena_povrsina"]],
min = total_model[["num_mins"]][["stambena_povrsina"]],
max = total_model[["num_maxs"]][["stambena_povrsina"]]),
selectInput("kat", "Kat", total_model[["factor_levels"]][["kat"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
width = 3
),
column(
selectInput("lift", "Lift", total_model[["factor_levels"]][["lift"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
numericInput("godina_izgradnje", "Godina izgradnje", value = 2018, min = 1600, max = 2018),
selectInput("potrebna_adaptacija", "Potrebna adaptacija", total_model[["factor_levels"]][["potrebna_adaptacija"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_parking", "Parking", total_model[["factor_levels"]][["ima_parking"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("energetski_razred", "Energetski razred", total_model[["factor_levels"]][["energetski_razred"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_vrt", "Vrt", total_model[["factor_levels"]][["ima_vrt"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_balkon", "Balkon", total_model[["factor_levels"]][["ima_balkon"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
width = 3
)
),
fluidRow(
column(
actionButton(inputId = "izracunaj_cijenu", label = "Izračunaj cijenu"),
tags$h3(textOutput(outputId = "cijena")),
tags$h4(textOutput(outputId = "debugger")),
width = 12
)
)
)
)
server <- function(input, output){
re <- eventReactive(
input$izracunaj_cijenu,
{
the_add = data.frame(
"grad_opcina" = factor(input$grad_opcina, levels = total_model[["factor_levels"]][["grad_opcina"]]),
"naselje" = factor(input$naselje, levels = total_model[["factor_levels"]][["naselje"]]),
"tip_stana" = factor(input$tip_stana, levels = total_model[["factor_levels"]][["tip_stana"]]),
"broj_etaza" = as.numeric(factor(input$broj_etaza, levels = total_model[["factor_levels"]][["broj_etaza"]])),
"broj_soba" = as.numeric(factor(input$broj_soba, levels = total_model[["factor_levels"]][["broj_soba"]])),
"kat" = as.numeric(factor(input$kat, levels = total_model[["factor_levels"]][["kat"]])),
"lift" = as.numeric(factor(input$lift, levels = total_model[["factor_levels"]][["lift"]])),
"stambena_povrsina" = input$stambena_povrsina,
"godina_izgradnje" = input$godina_izgradnje,
"potrebna_adaptacija" = as.numeric(factor(input$potrebna_adaptacija, levels = total_model[["factor_levels"]][["potrebna_adaptacija"]])),
"ima_parking" = as.numeric(factor(input$ima_parking, levels = total_model[["factor_levels"]][["ima_parking"]])),
"energetski_razred" = as.numeric(factor(input$energetski_razred, levels = total_model[["factor_levels"]][["energetski_razred"]])),
"ima_vrt" = as.numeric(factor(input$ima_vrt, levels = total_model[["factor_levels"]][["ima_vrt"]])),
"ima_balkon" = as.numeric(factor(input$ima_balkon, levels = total_model[["factor_levels"]][["ima_balkon"]]))
)
# return(paste(
#   the_add[1, ]$grad_opcina,
#   the_add[1, ]$naselje,
#   the_add[1, ]$tip_stana,
#   the_add[1, ]$broj_etaza,
#   the_add[1, ]$broj_soba,
#   the_add[1, ]$kat,
#   the_add[1, ]$lift,
#   the_add[1, ]$godina_izgradnje,
#   the_add[1, ]$stambena_povrsina,
#   the_add[1, ]$potrebna_adaptacija,
#   the_add[1, ]$ima_parking,
#   the_add[1, ]$energetski_razred,
#   the_add[1, ]$ima_vrt,
#   the_add[1, ]$ima_balkon
# ))
# post procesiranje
the_add$stambena_povrsina_sq = the_add$stambena_povrsina^2
rvar = total_model[["rvar"]]
predictors = total_model[["predictors"]]
d = the_add[, colnames(the_add) %in% total_model[["dcolnames"]]]
num_mins = total_model[["num_mins"]]
num_maxs = total_model[["num_maxs"]]
l1 = lapply(colnames(d), function(cn) {
#  if (is.numeric(d[[cn]])) d[[cn]] <<- scale(d[[cn]])
if (is.numeric(d[[cn]])) {
mn = num_mins[[cn]]
mx = num_maxs[[cn]]
if (mn != mx) {
d[[cn]] <<- (d[[cn]]-mn)/(mx-mn)
} else {
d[[cn]] <<- 1
}
}
})
# add the new chosen predictors (interactions) to d
for (newpredictor in predictors) {
if (grepl("__", newpredictor)) {
print(paste("Adding", newpredictor))
# ok, this is an interaction factor, check if it is n-n or f-f
preds = unlist(strsplit(newpredictor, "__"))
if (is.factor(d[[preds[1]]]) && is.factor(d[[preds[2]]])) {
itr = interaction(d[[preds[1]]], d[[preds[2]]], sep = "__")
d[[newpredictor]] = itr
levels(d[[newpredictor]]) = levels(itr)
} else if (is.numeric(d[[preds[1]]]) && is.numeric(d[[preds[2]]])) {
d[[newpredictor]] = d[[preds[1]]] * d[[preds[2]]]
} else {
print(paste("Unrecognized predictor", newpredictor))
}
}
}
d = d[, colnames(d) %in% c(rvar, predictors)]
f = total_model[["formula"]]
library(caret)
library(xgboost)
# ako d nema rvar, dodati dummy zbog model.matrix
if (is.null(d[[rvar]])) {
d[[rvar]] = rep(0, nrow(d))
}
dM = data.frame(model.matrix(as.formula(f), d))
colnames(dM) = enc2utf8(colnames(dM))
output$debugger <- renderText({
Encoding(colnames(dM))
})
dmodel = total_model[["dmodel"]]
ALG = "lm"
if (ALG == "lm") {
# ## linear approach
# xgboost
# dpredicted = predict(dmodel, newdata = as.matrix(dM[, !names(dM) %in% c(rvar)]))
# lm
dpredicted_ci = predict(dmodel,
newdata = dM,
type='response',
interval = "confidence")
dpredicted = dpredicted_ci[, "fit"]
dpredicted_lwr = dpredicted_ci[, "lwr"]
dpredicted_upr = dpredicted_ci[, "upr"]
} else if (ALG == "nn") {
## NN approach
# library(tensorflow)
# library(keras)
#
# dmodel = unserialize_model(dmodel, compile = T)
#
# colnames(dM) = gsub("č|ć", "c", colnames(dM))
# colnames(dM) = gsub("Č|Ć", "C", colnames(dM))
# colnames(dM) = gsub("đ", "dj", colnames(dM))
# colnames(dM) = gsub("Đ", "Dj", colnames(dM))
# colnames(dM) = gsub("š", "s", colnames(dM))
# colnames(dM) = gsub("Š", "S", colnames(dM))
# colnames(dM) = gsub("ž", "z", colnames(dM))
# colnames(dM) = gsub("Ž", "Z", colnames(dM))
#
# dpredicted = as.numeric(predict_on_batch(dmodel, as.matrix(dM[, !names(dM) %in% c(rvar)])))
#
# last_error = tail(total_model[["history"]]$metrics$mean_absolute_error, n = 1) # for NN
# last_error_upr = last_error + 1.96 * sqrt(last_error * (1 - last_error) / nrow(dM))
# dpredicted_lwr = dpredicted - last_error_upr
# dpredicted_upr = dpredicted + last_error_upr
## NN approach
} else {
return("Unknown algorithm!")
}
# "odskaliramo" predikcije i eksponenciramo (jer smo prilikom modeliranja radili log od rvar)
dpredicted = exp(dpredicted * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_lwr = exp(dpredicted_lwr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_upr = exp(dpredicted_upr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
paste("Cijena: ", round(dpredicted), " kn (", round(dpredicted_lwr), "kn - ", round(dpredicted_upr), "kn)", sep = "")
}
)
output$cijena <- renderText({
re()
})
}
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::deployApp('.')
#setwd("C:\\OnlineSync\\Mega\\R\\work\\web_scraping_real_estate\\cijenastanaapp")
# -- READ THE MODEL AND SET THE VARIABLES
total_model = readRDS("new_lm_rsq_847.RDS")
#total_model = readRDS("new_nn_rsq_851.RDS")
# -- NOW THE SHINY PART
library(shiny)
ui <- shinyUI(
fluidPage(
fluidRow(
column(
h1("Izračun cijene stana"),
width = 12
)
),
fluidRow(
column(
selectInput("grad_opcina", "Grad-općina", total_model[["factor_levels"]][["grad_opcina"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("naselje", "Naselje", total_model[["factor_levels"]][["naselje"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("tip_stana", "Tip stana", total_model[["factor_levels"]][["tip_stana"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("broj_etaza", "Broj etaža", total_model[["factor_levels"]][["broj_etaza"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("broj_soba", "Broj soba", total_model[["factor_levels"]][["broj_soba"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
numericInput("stambena_povrsina", "Stambena površina (m2)", value = total_model[["num_mins"]][["stambena_povrsina"]],
min = total_model[["num_mins"]][["stambena_povrsina"]],
max = total_model[["num_maxs"]][["stambena_povrsina"]]),
selectInput("kat", "Kat", total_model[["factor_levels"]][["kat"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
width = 3
),
column(
selectInput("lift", "Lift", total_model[["factor_levels"]][["lift"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
numericInput("godina_izgradnje", "Godina izgradnje", value = 2018, min = 1600, max = 2018),
selectInput("potrebna_adaptacija", "Potrebna adaptacija", total_model[["factor_levels"]][["potrebna_adaptacija"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_parking", "Parking", total_model[["factor_levels"]][["ima_parking"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("energetski_razred", "Energetski razred", total_model[["factor_levels"]][["energetski_razred"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_vrt", "Vrt", total_model[["factor_levels"]][["ima_vrt"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
selectInput("ima_balkon", "Balkon", total_model[["factor_levels"]][["ima_balkon"]],
selected = NULL, multiple = F, selectize = T, width = NULL, size = NULL),
width = 3
)
),
fluidRow(
column(
actionButton(inputId = "izracunaj_cijenu", label = "Izračunaj cijenu"),
tags$h3(textOutput(outputId = "cijena")),
tags$h4(textOutput(outputId = "debugger")),
width = 12
)
)
)
)
server <- function(input, output){
re <- eventReactive(
input$izracunaj_cijenu,
{
the_add = data.frame(
"grad_opcina" = factor(input$grad_opcina, levels = total_model[["factor_levels"]][["grad_opcina"]]),
"naselje" = factor(input$naselje, levels = total_model[["factor_levels"]][["naselje"]]),
"tip_stana" = factor(input$tip_stana, levels = total_model[["factor_levels"]][["tip_stana"]]),
"broj_etaza" = as.numeric(factor(input$broj_etaza, levels = total_model[["factor_levels"]][["broj_etaza"]])),
"broj_soba" = as.numeric(factor(input$broj_soba, levels = total_model[["factor_levels"]][["broj_soba"]])),
"kat" = as.numeric(factor(input$kat, levels = total_model[["factor_levels"]][["kat"]])),
"lift" = as.numeric(factor(input$lift, levels = total_model[["factor_levels"]][["lift"]])),
"stambena_povrsina" = input$stambena_povrsina,
"godina_izgradnje" = input$godina_izgradnje,
"potrebna_adaptacija" = as.numeric(factor(input$potrebna_adaptacija, levels = total_model[["factor_levels"]][["potrebna_adaptacija"]])),
"ima_parking" = as.numeric(factor(input$ima_parking, levels = total_model[["factor_levels"]][["ima_parking"]])),
"energetski_razred" = as.numeric(factor(input$energetski_razred, levels = total_model[["factor_levels"]][["energetski_razred"]])),
"ima_vrt" = as.numeric(factor(input$ima_vrt, levels = total_model[["factor_levels"]][["ima_vrt"]])),
"ima_balkon" = as.numeric(factor(input$ima_balkon, levels = total_model[["factor_levels"]][["ima_balkon"]]))
)
# return(paste(
#   the_add[1, ]$grad_opcina,
#   the_add[1, ]$naselje,
#   the_add[1, ]$tip_stana,
#   the_add[1, ]$broj_etaza,
#   the_add[1, ]$broj_soba,
#   the_add[1, ]$kat,
#   the_add[1, ]$lift,
#   the_add[1, ]$godina_izgradnje,
#   the_add[1, ]$stambena_povrsina,
#   the_add[1, ]$potrebna_adaptacija,
#   the_add[1, ]$ima_parking,
#   the_add[1, ]$energetski_razred,
#   the_add[1, ]$ima_vrt,
#   the_add[1, ]$ima_balkon
# ))
# post procesiranje
the_add$stambena_povrsina_sq = the_add$stambena_povrsina^2
rvar = total_model[["rvar"]]
predictors = total_model[["predictors"]]
d = the_add[, colnames(the_add) %in% total_model[["dcolnames"]]]
num_mins = total_model[["num_mins"]]
num_maxs = total_model[["num_maxs"]]
l1 = lapply(colnames(d), function(cn) {
#  if (is.numeric(d[[cn]])) d[[cn]] <<- scale(d[[cn]])
if (is.numeric(d[[cn]])) {
mn = num_mins[[cn]]
mx = num_maxs[[cn]]
if (mn != mx) {
d[[cn]] <<- (d[[cn]]-mn)/(mx-mn)
} else {
d[[cn]] <<- 1
}
}
})
# add the new chosen predictors (interactions) to d
for (newpredictor in predictors) {
if (grepl("__", newpredictor)) {
print(paste("Adding", newpredictor))
# ok, this is an interaction factor, check if it is n-n or f-f
preds = unlist(strsplit(newpredictor, "__"))
if (is.factor(d[[preds[1]]]) && is.factor(d[[preds[2]]])) {
itr = interaction(d[[preds[1]]], d[[preds[2]]], sep = "__")
d[[newpredictor]] = itr
levels(d[[newpredictor]]) = levels(itr)
} else if (is.numeric(d[[preds[1]]]) && is.numeric(d[[preds[2]]])) {
d[[newpredictor]] = d[[preds[1]]] * d[[preds[2]]]
} else {
print(paste("Unrecognized predictor", newpredictor))
}
}
}
d = d[, colnames(d) %in% c(rvar, predictors)]
f = total_model[["formula"]]
library(caret)
library(xgboost)
# ako d nema rvar, dodati dummy zbog model.matrix
if (is.null(d[[rvar]])) {
d[[rvar]] = rep(0, nrow(d))
}
dM = data.frame(model.matrix(as.formula(f), d))
colnames(dM) = gsub("č|ć", "c", colnames(dM))
colnames(dM) = gsub("Č|Ć", "C", colnames(dM))
colnames(dM) = gsub("đ", "dj", colnames(dM))
colnames(dM) = gsub("Đ", "Dj", colnames(dM))
colnames(dM) = gsub("š", "s", colnames(dM))
colnames(dM) = gsub("Š", "S", colnames(dM))
colnames(dM) = gsub("ž", "z", colnames(dM))
colnames(dM) = gsub("Ž", "Z", colnames(dM))
dmodel = total_model[["dmodel"]]
ALG = "lm"
if (ALG == "lm") {
# ## linear approach
# xgboost
# dpredicted = predict(dmodel, newdata = as.matrix(dM[, !names(dM) %in% c(rvar)]))
# lm
dpredicted_ci = predict(dmodel,
newdata = dM,
type='response',
interval = "confidence")
dpredicted = dpredicted_ci[, "fit"]
dpredicted_lwr = dpredicted_ci[, "lwr"]
dpredicted_upr = dpredicted_ci[, "upr"]
} else if (ALG == "nn") {
## NN approach
# library(tensorflow)
# library(keras)
#
# dmodel = unserialize_model(dmodel, compile = T)
#
# colnames(dM) = gsub("č|ć", "c", colnames(dM))
# colnames(dM) = gsub("Č|Ć", "C", colnames(dM))
# colnames(dM) = gsub("đ", "dj", colnames(dM))
# colnames(dM) = gsub("Đ", "Dj", colnames(dM))
# colnames(dM) = gsub("š", "s", colnames(dM))
# colnames(dM) = gsub("Š", "S", colnames(dM))
# colnames(dM) = gsub("ž", "z", colnames(dM))
# colnames(dM) = gsub("Ž", "Z", colnames(dM))
#
# dpredicted = as.numeric(predict_on_batch(dmodel, as.matrix(dM[, !names(dM) %in% c(rvar)])))
#
# last_error = tail(total_model[["history"]]$metrics$mean_absolute_error, n = 1) # for NN
# last_error_upr = last_error + 1.96 * sqrt(last_error * (1 - last_error) / nrow(dM))
# dpredicted_lwr = dpredicted - last_error_upr
# dpredicted_upr = dpredicted + last_error_upr
## NN approach
} else {
return("Unknown algorithm!")
}
# "odskaliramo" predikcije i eksponenciramo (jer smo prilikom modeliranja radili log od rvar)
dpredicted = exp(dpredicted * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_lwr = exp(dpredicted_lwr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
dpredicted_upr = exp(dpredicted_upr * (num_maxs[[rvar]]-num_mins[[rvar]]) + num_mins[[rvar]])
paste("Cijena: ", round(dpredicted), " kn (", round(dpredicted_lwr), "kn - ", round(dpredicted_upr), "kn)", sep = "")
}
)
output$cijena <- renderText({
re()
})
}
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::deployApp('.')
400/12
400/12/7.5
