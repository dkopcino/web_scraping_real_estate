5+5
#setInternet2(T) # not needed anymore
my_url = "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
web_connection = url(my_url)
web_connection
open(web_connection)
html_code = readLines(web_connection, 300)
close(web_connection)
html_code
5+5
5+5
my_url = "http://irfanelahi.com/churn_data_set.txt"
web_connection = url(my_url)
open(web_connection)
churn_data = readLines(web_connection)
close(web_connection)
churn_data
length(churn_data)
library(XML)
require("XML")
install.packages("XML")
library("XML")
html_page = htmlTreeParse(my_url, useInternalNodes = T)
html_page
my_url = "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
html_page = htmlTreeParse(my_url, useInternalNodes = T)
html_page
install.packages("rvest")
library(rvest)
html_page = rvest::html(my_url)
html_page = read_html(my_url)
html_page
detach("package:rvest", unload=TRUE)
remove.packages("rvest", lib="~/R/win-library/3.4")
str(html_page)
html_structure(html_page)
xpathSApply(html_page, "//title")
html_page = htmlTreeParse(my_url, useInternalNodes = T)
xpathSApply(html_page, "//title")
xpathSApply(html_page, "//title", xmlValue)
close(web_connection)
?htmlTreeParse
html_page = htmlTreeParse(my_url)
html_page = htmlTreeParse(my_url, asText = T)
xpathSApply(html_page, "//title", xmlValue)
html_page = htmlTreeParse(my_url)
xpathSApply(html_page, "//title", xmlValue)
install.packages("RSelenium")
#install.packages("RSelenium")
library(RSelenium)
RSelenium::checkForServer()
require(RSelenium)
remdr<-remoteDriver()
open_page<-remdr$open()
install.packages("mxnet")
remove.packages("mxnet", lib="~/R/win-library/3.4")
install.packages("mxnet")
#install.packages("tensorflow")
#install.packages("keras")
library(tensorflow)
#install_tensorflow(conda = "tensorflow") # name of the previously created Anaconda environment = tensorflow
library(keras)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
network %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy", metrics = c("accuracy"))
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images / 255
train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)
network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
#install.packages("tensorflow")
#install.packages("keras")
install_keras()
library(tibble)
library(readr)
data_dir <- "C:\\Users\\Danijel\\Desktop\\TMP\\temp"
fname <- file.path(data_dir, "jena_climate_2009_2016.csv")
data <- read_csv(fname)
library(ggplot2)
ggplot(data, aes(x = 1:nrow(data), y = `T (degC)`)) + geom_line()
data <- data.matrix(data[,-1])
train_data <- data[1:200000, ]
mean <- apply(train_data, 2, mean)
std <- apply(train_data, 2, sd)
data <- scale(data, center = mean, scale = std)
# data generator: yields a list (samples, targets), where samples is one batch of input data
# and targets is the corresponding array of target temperatures
# arguments:
#  data — the original array of floating-point data
#  lookback — how many timesteps back the input data should go
#  delay — how many timesteps in the future the target should be
#  min_index and max_index — indices in the data array that delimit which timesteps to draw from,
#    useful for keeping a segment of the data for validation and another for testing
#  shuffle — whether to shuffle the samples or draw them in chronological order
#  batch_size — number of samples per batch
#  step — period, in timesteps, at which you sample data, set to 6 in order to draw one data point every hour
generator <- function(data, lookback, delay, min_index, max_index, shuffle = FALSE, batch_size = 128, step = 6) {
if (is.null(max_index)) max_index <- nrow(data) - delay - 1
i <- min_index + lookback
function() {
if (shuffle) {
rows <- sample(c((min_index+lookback):max_index), size = batch_size)
} else {
if (i + batch_size >= max_index) i <<- min_index + lookback
rows <- c(i:min(i+batch_size, max_index))
i <<- i + length(rows)
}
samples <- array(0, dim = c(length(rows), lookback / step, dim(data)[[-1]]))
targets <- array(0, dim = c(length(rows)))
for (j in 1:length(rows)) {
indices <- seq(rows[[j]] - lookback, rows[[j]], length.out = dim(samples)[[2]])
samples[j, , ] <- data[indices, ]
targets[[j]] <- data[rows[[j]] + delay, 2]
}
list(samples, targets)
}
}
lookback <- 1440
step <- 6
delay <- 144
batch_size <- 128
train_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 200000,
shuffle = TRUE,
step = step,
batch_size = batch_size)
val_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 200001,
max_index = 300000,
step = step,
batch_size = batch_size)
test_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 300001,
max_index = NULL,
step = step,
batch_size = batch_size)
val_steps <- (300000 - 200001 - lookback) / batch_size
test_steps <- (nrow(data) - 300001 - lookback) / batch_size
## naive method - predict as the last temperature (24 hours ago)
evaluate_naive_method <- function() {
batch_maes <- c()
for (step in 1:val_steps) {
c(samples, targets) %<-% val_gen()
preds <- samples[,dim(samples)[[2]],2]
mae <- mean(abs(preds - targets))
batch_maes <- c(batch_maes, mae)
}
print(mean(batch_maes))
}
mean_batch_mae <- evaluate_naive_method()
celsius_mae <- mean_batch_mae * std[[2]]
## simple dense layers
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
library(tensorflow)
## naive method - predict as the last temperature (24 hours ago)
evaluate_naive_method <- function() {
batch_maes <- c()
for (step in 1:val_steps) {
c(samples, targets) %<-% val_gen()
preds <- samples[,dim(samples)[[2]],2]
mae <- mean(abs(preds - targets))
batch_maes <- c(batch_maes, mae)
}
print(mean(batch_maes))
}
mean_batch_mae <- evaluate_naive_method()
library(keras)
mean_batch_mae <- evaluate_naive_method()
celsius_mae <- mean_batch_mae * std[[2]]
## simple dense layers
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
?fit_generator
dm(data)
dim(data)
history <- model %>% fit_generator(train_gen,
steps_per_epoch = 500,
epochs = 1,
validation_data = val_gen,
validation_steps = val_steps)
plot(history)
history <- model %>% fit_generator(train_gen,
steps_per_epoch = 500,
epochs = 5,
validation_data = val_gen,
validation_steps = val_steps)
plot(history)
## layer_gru
model <- keras_model_sequential() %>%
layer_gru(units = 32, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 1)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
history2 <- model %>% fit_generator(train_gen,
steps_per_epoch = 500,
epochs = 5,
validation_data = val_gen,
validation_steps = val_steps)
plot(history2)
model <- keras_model_sequential() %>%
layer_gru(units = 32, dropout = 0.2, recurrent_dropout = 0.2,input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 1)
model %>% compile(optimizer = optimizer_rmsprop(), loss = "mae")
history3 <- model %>% fit_generator(train_gen,
steps_per_epoch = 500,
epochs = 5,
validation_data = val_gen,
validation_steps = val_steps)
plot(history3)
## 1D convnet + gru
step <- 3
lookback <- 720
delay <- 144
train_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 200000,
shuffle = TRUE,
step = step)
val_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 200001,
max_index = 300000,
step = step)
test_gen <- generator(data,
lookback = lookback,
delay = delay,
min_index = 300001,
max_index = NULL,
step = step)
val_steps <- (300000 - 200001 - lookback) / 128
test_steps <- (nrow(data) - 300001 - lookback) / 128
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 32, kernel_size = 5, activation = "relu", input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_max_pooling_1d(pool_size = 3) %>%
layer_conv_1d(filters = 32, kernel_size = 5, activation = "relu") %>%
layer_gru(units = 32, dropout = 0.1, recurrent_dropout = 0.5) %>%
layer_dense(units = 1)
summary(model)
model %>% compile(optimizer = optimizer_rmsprop(), loss = "mae")
history6 <- model %>% fit_generator(train_gen,
steps_per_epoch = 500,
epochs = 5,
validation_data = val_gen,
validation_steps = val_steps)
library(keras)
input_tensor <- layer_input(shape = c(64))
output_tensor <- input_tensor %>% layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>% layer_dense(units = 10, activation = "softmax")
model <- keras_model(input_tensor, output_tensor)
summary(model)
model %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy")
x_train <- array(runif(1000 * 64), dim = c(1000, 64))
y_train <- array(runif(1000 * 10), dim = c(1000, 10))
model %>% fit(x_train, y_train, epochs = 10, batch_size = 128)
model %>% evaluate(x_train, y_train)
library(keras)
text_vocabulary_size <- 10000
ques_vocabulary_size <- 10000
answer_vocabulary_size <- 500
text_input <- layer_input(shape = list(NULL), dtype = "int32", name = "text")
encoded_text <- text_input %>%
layer_embedding(input_dim = 64, output_dim = text_vocabulary_size) %>%
layer_lstm(units = 32)
question_input <- layer_input(shape = list(NULL), dtype = "int32", name = "question")
encoded_question <- question_input %>%
layer_embedding(input_dim = 32, output_dim = ques_vocabulary_size) %>%
layer_lstm(units = 16)
concatenated <- layer_concatenate(list(encoded_text, encoded_question))
answer <- concatenated %>% layer_dense(units = answer_vocabulary_size, activation = "softmax")
model <- keras_model(list(text_input, question_input), answer)
model %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy", metrics = c("acc"))
num_samples <- 1000
max_length <- 100
random_matrix <- function(range, nrow, ncol) {
matrix(sample(range, size = nrow * ncol, replace = TRUE), nrow = nrow, ncol = ncol)
}
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
#model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128 )
model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128 )
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
#model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128 )
encoded_question <- question_input %>%
layer_embedding(input_dim = 64, output_dim = ques_vocabulary_size) %>%
layer_lstm(units = 32)
concatenated <- layer_concatenate(list(encoded_text, encoded_question))
answer <- concatenated %>% layer_dense(units = answer_vocabulary_size, activation = "softmax")
model <- keras_model(list(text_input, question_input), answer)
model %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy", metrics = c("acc"))
num_samples <- 1000
max_length <- 100
random_matrix <- function(range, nrow, ncol) {
matrix(sample(range, size = nrow * ncol, replace = TRUE), nrow = nrow, ncol = ncol)
}
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
#model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128 )
?layer_embedding
text_input <- layer_input(shape = list(NULL), dtype = "int32", name = "text")
encoded_text <- text_input %>%
layer_embedding(input_dim = text_vocabulary_size, output_dim = 64) %>%
layer_lstm(units = 32)
question_input <- layer_input(shape = list(NULL), dtype = "int32", name = "question")
encoded_question <- question_input %>%
layer_embedding(input_dim = ques_vocabulary_size, output_dim = 32) %>%
layer_lstm(units = 16)
concatenated <- layer_concatenate(list(encoded_text, encoded_question))
answer <- concatenated %>% layer_dense(units = answer_vocabulary_size, activation = "softmax")
model <- keras_model(list(text_input, question_input), answer)
model %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy", metrics = c("acc"))
num_samples <- 1000
max_length <- 100
random_matrix <- function(range, nrow, ncol) {
matrix(sample(range, size = nrow * ncol, replace = TRUE), nrow = nrow, ncol = ncol)
}
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
#model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128 )
text_input <- layer_input(shape = list(NULL), dtype = "int32", name = "text")
encoded_text <- text_input %>%
layer_embedding(input_dim = text_vocabulary_size + 1, output_dim = 64) %>%
layer_lstm(units = 32)
question_input <- layer_input(shape = list(NULL), dtype = "int32", name = "question")
encoded_question <- question_input %>%
layer_embedding(input_dim = ques_vocabulary_size + 1, output_dim = 32) %>%
layer_lstm(units = 16)
concatenated <- layer_concatenate(list(encoded_text, encoded_question))
answer <- concatenated %>% layer_dense(units = answer_vocabulary_size, activation = "softmax")
model <- keras_model(list(text_input, question_input), answer)
model %>% compile(optimizer = "rmsprop", loss = "categorical_crossentropy", metrics = c("acc"))
num_samples <- 1000
max_length <- 100
random_matrix <- function(range, nrow, ncol) {
matrix(sample(range, size = nrow * ncol, replace = TRUE), nrow = nrow, ncol = ncol)
}
text <- random_matrix(1:text_vocabulary_size, num_samples, max_length)
question <- random_matrix(1:ques_vocabulary_size, num_samples, max_length)
answers <- random_matrix(0:1, num_samples, answer_vocabulary_size)
#model %>% fit(list(text, question), answers, epochs = 10, batch_size = 128)
model %>% fit(list(text = text, question = question), answers, epochs = 10, batch_size = 128)
1000/1.25
1200/1.25
900*1.25
800*1.25
700*1.25
750*1.25
1400+833+938
1400+833+875
800/1.25
700*1.25
1200*1.25
1000*1.25
1100*1.25
1000/7.5
160*8
install.packages("pcalg")
#install.packages("pcalg")
library(pcalg)
version
#install.packages("pcalg")
install.packages("graph")
update.packages()
setwd("C:/OnlineSync/Mega/R/work/web_scraping_real_estate")
setwd("C:\\OnlineSync\\Mega\\R\\work\\web_scraping_real_estate")
if(!exists("hellofunction", mode="function")) source("../functions.R", encoding = "UTF-8")
if(!exists("parse_kat", mode="function")) source("parsing.R", encoding = "UTF-8")
## which algorithm/model shall we use
ALGS = c("lm", "gb", "nn")
# using ggplot2
library('ggplot2')
### --> data preparation
library(dplyr)
library(data.table)
all_ads = data.frame()
#ads_files = list.files(path = ".", pattern = "all_ads_2018-([[:digit:]]|[[:punct:]])+.RDS", full.names = T)
ads_files = list.files(path = "data0", pattern = "all_ads_([[:digit:]]|[[:punct:]])+.RDS", full.names = T)
#ads_files = list.files(path = ".", pattern = "all_ads_2018-([[:digit:]]|[[:punct:]])+.RDS", full.names = T)
ads_files = list.files(path = "data0", pattern = "all_ads_([[:digit:]]|[[:punct:]])+.RDS", full.names = T)
ads_read = lapply(ads_files, FUN = function(ad_file) {
ads_000 = readRDS(ad_file)
all_ads <<- rbind(all_ads, ads_000, stringsAsFactors = F)
})
str(all_ads)
length(levels(factor(all_ads$lokacija)))
